# Copyright 2010-2025, Stephen Fryatt (info@stevefryatt.org.uk)
#
# This file is part of SFTools Shared Makefiles:
#
#   http://www.stevefryatt.org.uk/software/
#
# Licensed under the EUPL, Version 1.2 only (the "Licence");
# You may not use this work except in compliance with the
# Licence.
#
# You may obtain a copy of the Licence at:
#
#   http://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the Licence for the specific language governing
# permissions and limitations under the Licence.

# Shared Makefile for GCC-based C Applications
#
# This file really needs to be run by GNUMake.
# It is intended for native compilation on Linux (for use in a GCCSDK
# environment) or cross-compilation under the GCCSDK.
#
# Set VERSION to build using a version number and not an SVN revision.

.PHONY: all clean application documentation release backup

# Target Details

ARCHIVE ?= application
PACKAGE ?=
PACKAGELOC ?= Misc
APP ?= !App
UKRES ?= Resources/UK
RUNIMAGE ?= !RunImage,ff8
MENUS ?= Menus,ffd
FINDHELP ?= !Help,ffb
TEXTHELP ?= HelpText,fff
SHHELP ?=
HTHELP ?=
HTMLHELP ?=
README ?= ReadMe,fff
LICENCE ?= Licence,fff
SUBS ?=
ADDITIONS ?=
EXTRASRC ?=
EXTRAPREREQ ?=
EXTRASRCPREREQ ?=

# Set up the source files.

MANSRC ?= Source
MANSPR ?= ManSprite
READMEHDR ?= Header
MENUSRC ?= menudef
FINDHELPSRC ?= Help.bbt
PKGCTRL ?= Control
PKGCPY ?= Copyright
LICSRC ?= Licence

OBJS ?= main.o

# Set up the various build directories.

SRCDIR := src
MENUDIR := menus
MANUAL := manual
OBJDIR := obj
OUTDIR := build
SUBDIR := subs
PKGDIR := package
PKGTREEDIR := Apps
PKGCTRLDIR := RiscPkg

# Includes and libraries.

INCLUDES := -I$(GCCSDK_INSTALL_ENV)/include
LINKS := -L$(GCCSDK_INSTALL_ENV)/lib -lOSLibH32 -lSFLib32 -lFlexLib32
SWIDEFS := -swis $(GCCSDK_INSTALL_CROSSBIN)/../arm-unknown-riscos/include/swis.h -swis $(GCCSDK_INSTALL_ENV)/include/TokenizeSWIs.h

# Build Tools

ECHO := echo
PRINTF := printf
MKDIR := mkdir -p
RM := rm -rf
CP := cp
CD := cd
RSYNC := rsync
SED := sed
CC := $(wildcard $(GCCSDK_INSTALL_CROSSBIN)/*gcc)
ZIP := $(GCCSDK_INSTALL_ENV)/bin/zip
MANTOOLS := $(SFTOOLS_BIN)/mantools
BINDHELP := $(SFTOOLS_BIN)/bindhelp
TEXTMERGE := $(SFTOOLS_BIN)/textmerge
MENUGEN := $(SFTOOLS_BIN)/menugen
TOKENIZE := $(SFTOOLS_BIN)/tokenize
GETPKGREV := $(SFTOOLS_BIN)/getpackagerev
MAKECONTROL := $(SFTOOLS_BIN)/makecontrol
XMLMAN := $(SFTOOLS_BIN)/xmlman

# Build Flags

CCFLAGS += -std=gnu99 -mlibscl -mhard-float -static -mthrowback -Wall -O2 -fno-strict-aliasing -mpoke-function-name
ZIPFLAGS := -x "*/.svn/*" -r -, -9
PKGZIPFLAGS := -x "*/.svn/*" -r -, -9
SRCZIPFLAGS := -x "*/.svn/*" -r -9
PKGRSFLAGS := -av --exclude=*.svn*
BUZIPFLAGS := -x "*/.svn/*" -r -9
BINDHELPFLAGS := -f -r -v
MENUGENFLAGS := -d -m
TOKENIZEFLAGS +=  -verbose -warn pV -swi $(SWIDEFS)
HELPTOKFLAGS := $(TOKENIZEFLAGS) -crunch IT

# Set up escape sequences for colouring terminal output.

COLOUR_ACTION := \033[1;32m
COLOUR_END := \033[0m

# The build date.

BUILD_DATE := $(shell date "+%d %b %Y")
HELP_DATE := $(shell date "+%-d %B %Y")
FILE_DATE := $(shell date "+%Y%m%d")

# Construct version or revision information.

ifeq ($(VERSION),)
  RELEASE := $(shell git rev-parse --short=7 HEAD)
  override VERSION := $(RELEASE)
  HELP_VERSION := ----
ifneq ($(PACKAGE),)
  PACKAGE := $(PACKAGE)Unstable
  PKG_VERSION := $(shell $(GETPKGREV) --index unstable --package $(PACKAGE) --revision $(VERSION))
endif
else
  RELEASE := $(subst .,,$(VERSION))
  HELP_VERSION := $(VERSION)
ifneq ($(PACKAGE),)
  PKG_VERSION := $(shell $(GETPKGREV) --index stable --package $(PACKAGE) --revision $(VERSION))
endif
endif

# The archives to assemble the release files, sources and backups in.
# If $(RELEASE) is set, then the file can be given a version number suffix.

ZIPFILE := $(ARCHIVE)$(RELEASE).zip
SRCZIPFILE := $(ARCHIVE)$(RELEASE)src.zip
PKGZIPFILE := $(PACKAGE)_$(PKG_VERSION).zip
BUZIPFILE := $(ARCHIVE)$(FILE_DATE).zip

# Expand substitution target files.

ifneq ($(SUBS),)
SUBS := $(addprefix $(OUTDIR)/$(APP)/, $(SUBS))
endif

# Provide a means of reporting progress.

show-stage = $(PRINTF) "$(COLOUR_ACTION)*%18s: %s$(COLOUR_END)\n" "$(1)" "$(2)"

# Inform the user what we're about to do.

$(info *** Building with version $(VERSION) ($(RELEASE)) on date $(BUILD_DATE) ***)

# Build everything, but don't package it for release.

all: application documentation

# Build the application and its supporting binary files.

application: $(OUTDIR)/$(APP)/$(RUNIMAGE) $(OUTDIR)/$(APP)/$(UKRES)/$(MENUS) $(SUBS) $(EXTRAPREREQ)

# Build the complete !RunImage from the object files.

OBJS := $(addprefix $(OBJDIR)/, $(OBJS))

$(OUTDIR)/$(APP)/$(RUNIMAGE): $(OBJS)
	@$(call show-stage,LINKING,$(OUTDIR)/$(APP)/$(RUNIMAGE))
	@$(CC) $(CCFLAGS) $(LINKS) -o $(OUTDIR)/$(APP)/$(RUNIMAGE) $(OBJS)

# Build the object files, and identify their dependencies.

-include $(OBJS:.o=.d)

$(OBJDIR)/%.o: $(SRCDIR)/%.c $(EXTRASRCPREREQ)
	@$(call show-stage,COMPILING,$<)
	@$(MKDIR) $(@D)
	@$(CC) -c $(CCFLAGS) -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"' $(INCLUDES) $< -o $@
	@$(CC) -MM $(CCFLAGS) -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"' $(INCLUDES) $< > $(@:.o=.d)
	@mv -f $(@:.o=.d) $(@:.o=.d).tmp
	@sed -e 's|.*:|$@:|' < $(@:.o=.d).tmp > $(@:.o=.d)
	@sed -e 's/.*://' -e 's/\\$$//' < $(@:.o=.d).tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $(@:.o=.d)
	@rm -f $(@:.o=.d).tmp

# Build the menus file.

ifneq ($(MENUS),)
$(OUTDIR)/$(APP)/$(UKRES)/$(MENUS): $(MENUDIR)/$(MENUSRC)
	@$(call show-stage,MAKE MENUS,$(MENUDIR)/$(MENUSRC))
	@$(MENUGEN) $(MENUDIR)/$(MENUSRC) $(OUTDIR)/$(APP)/$(UKRES)/$(MENUS) $(MENUGENFLAGS)
endif

# Process any substitution files.

ifneq ($(SUBS),)
$(SUBS):
	@$(call show-stage,SUBSTITUTING,$@)
	@$(SED) 's/{{VERSION}}/$(VERSION)/' $(SUBDIR)/$(@F) > $@
endif

# Build the documentation

documentation: $(OUTDIR)/$(APP)/$(FINDHELP) $(OUTDIR)/$(README) $(OUTDIR)/$(LICENCE) $(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP) \
		$(if $(SHHELP),$(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP)) $(if $(HTHELP),$(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP)) \
		$(if $(HTMLHELP),$(OUTDIR)/$(HTMLHELP))

$(OUTDIR)/$(APP)/$(FINDHELP): $(MANUAL)/$(FINDHELPSRC)
	@$(call show-stage,TOKENIZING,$(OUTDIR)/$(APP)/$(FINDHELP))
	@$(TOKENIZE) $(HELPTOKFLAGS) $(MANUAL)/$(FINDHELPSRC) -out $(OUTDIR)/$(APP)/$(FINDHELP)

$(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP): $(MANUAL)/$(MANSRC)
	@$(call show-stage,TEXT MANUAL,$(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -text $(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP) -encoding AcornL1 \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MTEXT -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP) \
			-D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif

ifneq ($(SHHELP),)
$(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP): $(MANUAL)/$(MANSRC) $(MANUAL)/$(MANSPR)
	@$(call show-stage,STRONGHELP MANUAL,$(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -strong $(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP) -encoding AcornL1 \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MSTRONG -I$(MANUAL)/$(MANSRC) -OSHTemp -D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
	@$(CP) $(MANUAL)/$(MANSPR) SHTemp/Sprites,ff9
	@$(BINDHELP) SHTemp $(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP) $(BINDHELPFLAGS)
	@$(RM) SHTemp
endif
endif

$(OUTDIR)/$(README): $(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP) $(MANUAL)/$(READMEHDR)
	@$(call show-stage,CREATE README,$(OUTDIR)/$(README))
	@$(TEXTMERGE) $(OUTDIR)/$(README) $(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP) $(MANUAL)/$(READMEHDR) 5

ifneq ($(HTHELP),)
$(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP): $(MANUAL)/$(MANSRC)
	@$(call show-stage,HTML MANUAL,$(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -html $(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP) -encoding 7Bit \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MHTML -C../images/ -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP) \
			-D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif
endif

ifneq ($(HTMLHELP),)
$(OUTDIR)/$(HTMLHELP): $(MANUAL)/$(MANSRC)
	@$(call show-stage,HTML MANUAL,$(OUTDIR)/$(HTMLHELP))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -html $(OUTDIR)/$(HTMLHELP) -encoding 7Bit \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MHTML -C../images/ -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(HTMLHELP) \
			-D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif
endif

$(OUTDIR)/$(LICENCE): $(LICSRC)
	@$(call show-stage,LICENCE,$(OUTDIR)/$(LICENCE))
	@$(CP) $(LICSRC) $(OUTDIR)/$(LICENCE)


# Build the release Zip file.

release: clean all
	@$(call show-stage,ZIPPING RELEASE,$(ZIPFILE))
	@$(RM) ../$(ZIPFILE)
	@($(CD) $(OUTDIR) ; $(ZIP) $(ZIPFLAGS) ../../$(ZIPFILE) $(APP) $(README) $(LICENCE) $(ADDITIONS))
ifneq ($(PACKAGE),)
	@$(call show-stage,ZIPPING PACKAGE,$(PKGZIPFILE))
	@$(RM) ../$(PKGZIPFILE)
	@$(MKDIR) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)
	@$(MKDIR) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)
	@$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)/*
	@($(CD) $(OUTDIR) ; $(RSYNC) $(PKGRSFLAGS) $(APP) $(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)/ )
	@$(MAKECONTROL) --template $(PKGDIR)/$(PKGCTRL) --control $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCTRL) --version $(PKG_VERSION)
	@$(TEXTMERGE) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCPY) $(OUTDIR)/$(LICENCE) $(PKGDIR)/$(PKGCPY) 5
	@($(CD) $(OUTDIR)/$(PKGDIR) ; $(ZIP) $(PKGZIPFLAGS) ../../../$(PKGZIPFILE) $(PKGTREEDIR) $(PKGCTRLDIR))
endif
	@$(call show-stage,ZIPPING SOURCE,$(SRCZIPFILE))
	@$(RM) ../$(SRCZIPFILE)
	@$(ZIP) $(SRCZIPFLAGS) ../$(SRCZIPFILE) Makefile $(OUTDIR) $(SRCDIR) $(MENUDIR) $(MANUAL) $(EXTRASRC)


# Build a backup Zip file

backup:
	@$(call show-stage,ZIPPING BACKUP,$(BUZIPFILE))
	@$(RM) ../$(BUZIPFILE)
	@$(ZIP) $(BUZIPFLAGS) ../$(BUZIPFILE) *


# Clean targets

clean::
	@$(call show-stage,CLEANING,)
	$(RM) $(OBJDIR)/*
	$(RM) $(OUTDIR)/$(APP)/$(RUNIMAGE)
	$(RM) $(OUTDIR)/$(APP)/$(FINDHELP)
	$(RM) $(OUTDIR)/$(APP)/$(UKRES)/$(TEXTHELP)
	$(RM) $(OUTDIR)/$(README)
	$(RM) $(OUTDIR)/$(LICENCE)
ifneq ($(MENUS),)
	$(RM) $(OUTDIR)/$(APP)/$(UKRES)/$(MENUS)
endif
ifneq ($(SUBS),)
	$(foreach SUBTARGET,$(SUBS),$(RM) $(SUBTARGET))
endif
ifneq ($(SHHELP),)
	$(RM) $(OUTDIR)/$(APP)/$(UKRES)/$(SHHELP)
endif
ifneq ($(HTHELP),)
	$(RM) $(OUTDIR)/$(APP)/$(UKRES)/$(HTHELP)
endif
ifneq ($(HTMLHELP),)
	$(RM) $(OUTDIR)/$(HTMLHELP)
endif
ifneq ($(PACKAGE),)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCTRL)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCPY)
endif
