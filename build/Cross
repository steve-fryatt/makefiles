# Copyright 2010-2025, Stephen Fryatt (info@stevefryatt.org.uk)
#
# This file is part of SFTools Shared Makefiles:
#
#   http://www.stevefryatt.org.uk/software/
#
# Licensed under the EUPL, Version 1.2 only (the "Licence");
# You may not use this work except in compliance with the
# Licence.
#
# You may obtain a copy of the Licence at:
#
#   http://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the Licence for the specific language governing
# permissions and limitations under the Licence.

# Shared Makefile for GCC-based Cross-Platform Utilities
#
# This file really needs to be run by GNUMake.
# It is intended for native compilation on Linux (for use in a GCCSDK
# environment) or cross-compilation under the GCCSDK.
#
# Set VERSION to build using a version number and not an SVN revision.

.PHONY: all clean application documentation release backup install

# Target Details

ARCHIVE ?= utility
PACKAGE ?=
PACKAGELOC ?= Misc

ifeq ($(TARGET),riscos)
  RUNIMAGE ?= utility,ff8
  README ?= ReadMe,fff
  HTMLHELP ?=
  LICENCE ?= Licence,fff
  ADDITIONS ?=
else
  RUNIMAGE ?= utility
  README ?= ReadMe.txt
  HTMLHELP ?=
  LICENCE ?= Licence.txt
  ADDITIONS ?=
endif

EXTRASRC ?=
EXTRAPREREQ ?=
EXTRASRCPREREQ ?=

# Set up the source files.

MANSRC ?= Source
PKGCTRL ?= Control
PKGCPY ?= Copyright
LICSRC ?= Licence

OBJS ?= main.o

# Set up the various build directories.

SRCDIR := src
MANUAL := manual
OBJROOT := obj
OBJLINUX := linux
OBJRO := ro
OUTDIRLINUX := buildlinux
OUTDIRRO:= buildro
ifeq ($(TARGET),riscos)
  OBJDIR := $(OBJROOT)/$(OBJRO)
  OUTDIR := $(OUTDIRRO)
else
  OBJDIR := $(OBJROOT)/$(OBJLINUX)
  OUTDIR := $(OUTDIRLINUX)
endif
PKGDIR := package
PKGTREEDIR := Apps
PKGCTRLDIR := RiscPkg

# Includes and libraries.

ifeq ($(TARGET),riscos)
  INCLUDES := -I$(GCCSDK_INSTALL_ENV)/include
  LINKS := -L$(GCCSDK_INSTALL_ENV)/lib -lOSLibH32
else
  INCLUDES := 
  LINKS := 
endif

# Build Tools

ECHO := echo
PRINTF := printf
MKDIR := mkdir -p
RM := rm -rf
CP := cp
CD := cd
RSYNC := rsync

ifeq ($(TARGET),riscos)
  CC := $(wildcard $(GCCSDK_INSTALL_CROSSBIN)/*gcc)
else
  CC := gcc
endif

ZIP := $(GCCSDK_INSTALL_ENV)/bin/zip
MANTOOLS := $(SFTOOLS_BIN)/mantools
GETPKGREV := $(SFTOOLS_BIN)/getpackagerev
MAKECONTROL := $(SFTOOLS_BIN)/makecontrol
XMLMAN := $(SFTOOLS_BIN)/xmlman

# Build Flags

ifeq ($(TARGET),riscos)
  CCFLAGS += -mlibscl -mhard-float -static -mthrowback -Wall -O2 -D'RISCOS' -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"' -fno-strict-aliasing -mpoke-function-name
  ZIPFLAGS := -x "*/.svn/*" -r -, -9
else
  CCFLAGS += -Wall -g -O2 -fno-strict-aliasing -rdynamic -D'LINUX' -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"'
  ZIPFLAGS := -x "*/.svn/*" -r -9
endif
PKGZIPFLAGS := -x "*/.svn/*" -r -, -9
SRCZIPFLAGS := -x "*/.svn/*" -r -9
BUZIPFLAGS := -x "*/.svn/*" -r -9
PKGRSFLAGS := -av --exclude=*.svn*

# Set up escape sequences for colouring terminal output.

COLOUR_ACTION := \033[1;32m
COLOUR_END := \033[0m

# The build date.

BUILD_DATE := $(shell date "+%d %b %Y")
HELP_DATE := $(shell date "+%-d %B %Y")
FILE_DATE := $(shell date "+%Y%m%d")

# Construct version or revision information.

ifeq ($(VERSION),)
  RELEASE := $(shell git rev-parse --short=7 HEAD)
  override VERSION := $(RELEASE)
  HELP_VERSION := ----
ifneq ($(PACKAGE),)
  PACKAGE := $(PACKAGE)Unstable
  PKG_VERSION := $(shell $(GETPKGREV) --index unstable --package $(PACKAGE) --revision $(VERSION))
endif
else
  RELEASE := $(subst .,,$(VERSION))
  HELP_VERSION := $(VERSION)
ifneq ($(PACKAGE),)
  PKG_VERSION := $(shell $(GETPKGREV) --index stable --package $(PACKAGE) --revision $(VERSION))
endif
endif

# The archives to assemble the release files, sources and backups in.
# If $(RELEASE) is set, then the file can be given a version number suffix.

ZIPFILE := $(ARCHIVE)$(RELEASE).zip
SRCZIPFILE := $(ARCHIVE)$(RELEASE)src.zip
PKGZIPFILE := $(PACKAGE)_$(PKG_VERSION).zip
BUZIPFILE := $(ARCHIVE)$(FILE_DATE).zip

# Provide a means of reporting progress.

show-stage = $(PRINTF) "$(COLOUR_ACTION)*%18s: %s$(COLOUR_END)\n" "$(1)" "$(2)"

# Inform the user what we're about to do.

$(info *** Building with version $(VERSION) ($(RELEASE)) on date $(BUILD_DATE) ***)

# Build everything, but don't package it for release.

all: application documentation

# Build the application and its supporting binary files.

application: $(OUTDIR)/$(RUNIMAGE) $(EXTRAPREREQ)

# Build the complete !RunImage from the object files.

OBJS := $(addprefix $(OBJDIR)/, $(OBJS))

$(OUTDIR)/$(RUNIMAGE): $(OUTDIR) $(OBJDIR) $(OBJS)
	@$(call show-stage,LINKING,$(OUTDIR)/$(RUNIMAGE))
	@$(CC) $(CCFLAGS) -o $(OUTDIR)/$(RUNIMAGE) $(OBJS) $(LINKS)

# Build the object files, and identify their dependencies.

-include $(OBJS:.o=.d)

$(OBJDIR)/%.o: $(SRCDIR)/%.c $(EXTRASRCPREREQ)
	@$(call show-stage,COMPILING,$<)
	@$(MKDIR) $(@D)
	@$(CC) -c $(CCFLAGS) -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"' $(INCLUDES) $< -o $@
	@$(CC) -MM $(CCFLAGS) -D'BUILD_VERSION="$(VERSION)"' -D'BUILD_DATE="$(BUILD_DATE)"' $(INCLUDES) $< > $(@:.o=.d)
	@mv -f $(@:.o=.d) $(@:.o=.d).tmp
	@sed -e 's|.*:|$@:|' < $(@:.o=.d).tmp > $(@:.o=.d)
	@sed -e 's/.*://' -e 's/\\$$//' < $(@:.o=.d).tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $(@:.o=.d)
	@rm -f $(@:.o=.d).tmp

# Create a folder to hold the object files.

$(OBJDIR):
	$(MKDIR) $(OBJDIR)

# Create a folder to take the output.

$(OUTDIR):
	$(MKDIR) $(OUTDIR)

# Build the documentation

documentation: $(OUTDIR)/$(README) $(OUTDIR)/$(LICENCE) $(if $(HTMLHELP),$(OUTDIR)/$(HTMLHELP))

$(OUTDIR)/$(README): $(MANUAL)/$(MANSRC)
	@$(call show-stage,TEXT MANUAL,$(OUTDIR)/$(README))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -text $(OUTDIR)/$(README) \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MTEXT -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(README) \
			-D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif

ifneq ($(HTMLHELP),)
$(OUTDIR)/$(HTMLHELP): $(MANUAL)/$(MANSRC)
	@$(call show-stage,HTML MANUAL,$(OUTDIR)/$(HTMLHELP))
ifneq ($(findstring .xml, $(MANSRC)),)
	@$(XMLMAN) $(MANUAL)/$(MANSRC) -html $(OUTDIR)/$(HTMLHELP) \
			-define 'version=$(HELP_VERSION)' -define 'date=$(HELP_DATE)'
else
	@$(MANTOOLS) -MHTML -C../images/ -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(HTMLHELP) \
			-D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif
endif

$(OUTDIR)/$(LICENCE): $(LICSRC)
	@$(call show-stage,LICENCE,$(OUTDIR)/$(LICENCE))
	@$(CP) $(LICSRC) $(OUTDIR)/$(LICENCE)

# Build the release Zip file.

release: clean all
	@$(call show-stage,ZIPPING RELEASE,$(ZIPFILE))
	@$(RM) ../$(ZIPFILE)
	@($(CD) $(OUTDIR) ; $(ZIP) $(ZIPFLAGS) ../../$(ZIPFILE) $(RUNIMAGE) $(README) $(LICENCE) $(ADDITIONS))
ifneq ($(PACKAGE),)
	@$(call show-stage,ZIPPING PACKAGE,$(PKGZIPFILE))
	@$(RM) ../$(PKGZIPFILE)
	@$(MKDIR) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)
	@$(MKDIR) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)
	@$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)/*
	@($(CD) $(OUTDIR) ; $(RSYNC) $(PKGRSFLAGS) $(APP) $(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)/ )
	@$(MAKECONTROL) --template $(PKGDIR)/$(PKGCTRL) --control $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCTRL) --version $(PKG_VERSION)
	@$(TEXTMERGE) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCPY) $(OUTDIR)/$(LICENCE) $(PKGDIR)/$(PKGCPY) 5
	@($(CD) $(OUTDIR)/$(PKGDIR) ; $(ZIP) $(PKGZIPFLAGS) ../../../$(PKGZIPFILE) $(PKGTREEDIR) $(PKGCTRLDIR))
endif
	@$(call show-stage,ZIPPING SOURCE,$(SRCZIPFILE))
	@$(RM) ../$(SRCZIPFILE)
	@$(ZIP) $(SRCZIPFLAGS) ../$(SRCZIPFILE) Makefile $(OUTDIRLINUX) $(OUTDIRRO) $(SRCDIR) $(MANUAL) $(EXTRASRC)

# Build a backup Zip file

backup:
	@$(call show-stage,ZIPPING BACKUP,$(BUZIPFILE))
	@$(RM) ../$(BUZIPFILE)
	@$(ZIP) $(BUZIPFLAGS) ../$(BUZIPFILE) *

# Install the finished version in the GCCSDK, ready for use.

install: clean all
	@$(call show-stage,INSTALLING,$(SFTOOLS_BIN))
	$(CP) -r $(OUTDIR)/$(RUNIMAGE) $(SFTOOLS_BIN)

# Clean targets

clean::
	@$(call show-stage,CLEANING,)
	$(RM) $(OBJDIR)/*
	$(RM) $(OUTDIR)/$(RUNIMAGE)
	$(RM) $(OUTDIR)/$(README)
	$(RM) $(OUTDIR)/$(LICENCE)
ifneq ($(PACKAGE),)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGTREEDIR)/$(PACKAGELOC)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCTRL)
	$(RM) $(OUTDIR)/$(PKGDIR)/$(PKGCTRLDIR)/$(PKGCPY)
endif
